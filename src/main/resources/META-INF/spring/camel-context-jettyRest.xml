<?xml version="1.0" encoding="UTF-8"?>
<!--
	@heojea 20171215
	@Auth : 허재연
	@DESC : jetty 기반의 http rest 서버를 만들도록 한다. client는 별도로 만들지 않고 본 페이지에 만들도록 할것이다.

	POST:::CREATE
	GET:::READ
	PUT:::UPDATE
	DELETE:::DELETE
-->
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

	<!-- 스프링 빈을 이용하여 프로세서를 정의한다.-->
	<bean id="helloProcess" class="co.kr.jettyRest.process.HelloProcess" />
	<bean id="helloProcessPost" class="co.kr.jettyRest.process.HelloProcessPost" />

	<!-- custom unmarshal  -->
	<!--<bean id="customUnmarshal" class="co.kr.jettyRest.process.marshal.CustomUnmarshal" />-->

	<camelContext xmlns="http://camel.apache.org/schema/spring">
		<!--
			레스트 서버로 활용될 서저를 지정하고 옵션을 정의 한다.
			bindingMode="json" json으로 지정
		-->
		<restConfiguration component="jetty" host="localhost" port="9090" bindingMode="json"  enableCORS="true">
			<!--<endpointProperty key="handlers" value="securityHandler" />-->
			<!--<endpointProperty key="sessionSupport" value="true" />-->
			<endpointProperty key="httpClient.idleTimeout" value="5000" />
			<dataFormatProperty key="json.in.disableFeatures" value="FAIL_ON_UNKNOWN_PROPERTIES,ADJUST_DATES_TO_CONTEXT_TIME_ZONE"/>
			<dataFormatProperty key="json.in.enableFeatures" value="FAIL_ON_NUMBERS_FOR_ENUMS,USE_BIG_DECIMAL_FOR_FLOATS"/>
			<dataFormatProperty key="prettyPrint" value="true" />
		</restConfiguration>

		<!-- GET 방식 기술 -->
		<rest path="/say">
			<get uri="/hello" consumes="application/json">
				<to uri="bean:helloProcess" />
			</get>
		</rest>

		<!--
			### POST 방식 기술 ####
			### client ajax post call 방식 기술
			   $.ajax({
					method : "POST",
					url: "http://localhost:9090/postUrl/bye",
					data: JSON.stringify({user:'heojea',name:'deahan'}),
					contentType : "text/plain",
					success: function (response) {
						console.log(response);
					},
					complete: function (response) {
						alert("complete ~~");
					},
					error: function (response) {
						alert("Falla - " + response.d);
					}
				});
		-->
		<rest path="/postUrl">
			<post uri="/bye">
				<to uri="bean:helloProcessPost" />
			</post>
		</rest>

		<!-- router 정의 부분  -->
		<!--<route>
			<from uri="direct:hello"/>
			<process ref="helloProcess" />
			<transform>
				<simple>${body}</simple>
			</transform>
		</route>-->

		<!--<route>
			<from uri="direct:bye"/>
			<log message="process before log pring test ========= " />
			<process ref="helloProcessPost" />
		</route>-->
	</camelContext>
</beans>